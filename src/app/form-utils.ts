import { FormArray, FormControl, FormGroup, Validators } from '@angular/forms';
import { Request1 } from './api-models';

type AllowedRecordKeyType = string | number | symbol;

export declare type TypeToFormGroup<T> = {
  [K in keyof T]: T[K] extends Array<infer R> ?
                  FormArray<
                    R extends Record<AllowedRecordKeyType, unknown>
                    ? FormGroup<TypeToFormGroup<R>>
                    : FormControl<R>
                  > : T[K] extends Record<AllowedRecordKeyType, unknown>
                      ? FormGroup<TypeToFormGroup<T[K]>>
                      : FormControl<T[K]>;
};


// helper method that creates form instance based on given API type (in myc ase this is 'Request1')
export function createForm(r: Request1 | null): FormGroup<TypeToFormGroup<Request1>> {

  // Request1 is an API request type that is generated by Swagger
  return new FormGroup<TypeToFormGroup<Request1>>({
                                                    countryCode2: new FormControl(r?.countryCode2 || '',
                                                                                  { nonNullable: true, validators: [Validators.required] }
                                                    ),
                                                    itemPrice: new FormControl(r?.itemPrice || 0,
                                                                               { nonNullable: true, validators: [Validators.required, Validators.min(1)] }
                                                    ),
                                                    vat: new FormControl(r?.vat || 0,
                                                                         { nonNullable: true, validators: [Validators.required, Validators.min(0)] }
                                                    ),
                                                    numberOfItems: new FormControl(r?.numberOfItems || 0,
                                                                                   { nonNullable: true, validators: [Validators.required, Validators.min(1)] }
                                                    ),
                                                  });
}

export class ExtendedFormGroup<TModel extends {
  [key: string]: any;
}> extends FormGroup<TypeToFormGroup<TModel>> {

  #initializing = false;

  public get initializing() {
    return this.#initializing;
  }

  public initialize(value: TModel) {
    try {
      this.#initializing = true;

      this.setValue(value);

      this.#initializing = false;
    } catch {
      this.#initializing = false;
    }
  }
}


// helper method that creates form instance based on given API type (in myc ase this is 'Request1')
export function createExtendedForm(r: Request1 | null): ExtendedFormGroup<Request1> {

  // Request1 is an API request type that is generated by Swagger
  return new ExtendedFormGroup<Request1>({
                                           countryCode2: new FormControl(r?.countryCode2 || '',
                                                                         { nonNullable: true, validators: [Validators.required] }
                                           ),
                                           itemPrice: new FormControl(r?.itemPrice || 0,
                                                                      { nonNullable: true, validators: [Validators.required, Validators.min(1)] }
                                           ),
                                           vat: new FormControl(r?.vat || 0,
                                                                { nonNullable: true, validators: [Validators.required, Validators.min(0)] }
                                           ),
                                           numberOfItems: new FormControl(r?.numberOfItems || 0,
                                                                          { nonNullable: true, validators: [Validators.required, Validators.min(1)] }
                                           ),
                                         });
}
